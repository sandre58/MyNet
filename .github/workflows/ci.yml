name: CI - Build and Test

on:
  push:
    branches: [ "main", "feature/*", "hotfix/*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read       # Required to checkout code
  pages: write         # Required to publish to GitHub Pages
  id-token: write      # Required for OIDC authentication

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  # Job 1: Build, Test, Coverage
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install workloads
        run: |
          dotnet workload install wasm-tools
          dotnet workload install android
          dotnet workload restore

      - name: Install NBGV tool
        run: dotnet tool install -g nbgv

      - name: Get version from NBGV
        id: nbgv
        run: |
          echo "Version=$(nbgv get-version -v Version)" >> $GITHUB_OUTPUT
          echo "SimpleVersion=$(nbgv get-version -v SimpleVersion)" >> $GITHUB_OUTPUT

      - name: Display version info
        run: |
          echo "Version: ${{ steps.nbgv.outputs.Version }}"
          echo "Simple Version: ${{ steps.nbgv.outputs.SimpleVersion }}"

      - name: Restore dependencies
        run: dotnet restore --property:EnableWindowsTargeting=true

      - name: Build all projects
        run: dotnet build --configuration Release --no-restore --property:EnableWindowsTargeting=true

      - name: Run tests with coverage
        run: |
          dotnet test --configuration Release --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --logger "GitHubActions;report-warnings=false" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=./coverage/

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/coverage.cobertura.xml'
          targetdir: 'coverage-report'
          reporttypes: 'Html;Cobertura;MarkdownSummary;Badges'
          classfilters: '-AutoGeneratedProgram'

      - name: Add coverage comment to PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage-report/Summary.md

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: '**/coverage.cobertura.xml'
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/bin/Release/
            **/obj/Release/
          retention-days: 1

  # Job 2: Package NuGet packages
  package:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./

      - name: Pack all NuGet packages
        run: |
          # Create output directory
          mkdir -p ./packages
          
          # Find all packable projects (exclude demos, tests, and check IsPackable)
          find src -name "*.csproj" -not -path "*/Demo*" -not -path "*/Test*" | while read project; do
            echo "Checking project: $project"
            
            # Check if project is explicitly marked as not packable
            if grep -q "<IsPackable>false</IsPackable>" "$project"; then
              echo "Skipping $project (IsPackable=false)"
              continue
            fi
            
            # Check if it's an executable project (typically not packable)
            if grep -q "<OutputType>Exe</OutputType>" "$project" || grep -q "<UseWPF>true</UseWPF>" "$project" || grep -q "<UseWindowsForms>true</UseWindowsForms>" "$project"; then
              echo "Skipping $project (executable/UI project)"
              continue
            fi
            
            echo "Packing: $project"
            dotnet pack "$project" \
              --configuration Release \
              --no-build \
              --output ./packages \
              --verbosity minimal
          done
          
          # List generated packages
          echo "Generated NuGet packages:"
          ls -la ./packages/ || echo "No packages generated"

      - name: Upload NuGet packages artifact
        if: hashFiles('./packages/*.nupkg') != ''
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg

      - name: Report packaging results
        run: |
          if [ -d "./packages" ] && [ "$(ls -A ./packages)" ]; then
            echo "✅ Successfully packaged $(ls ./packages/*.nupkg | wc -l) NuGet packages"
            ls -la ./packages/
          else
            echo "ℹ️ No NuGet packages were generated (no packable projects found)"
          fi

  # Job 3: Build and publish demos
  build-demos:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install workloads
        run: |
          dotnet workload install wasm-tools
          dotnet workload install android
          dotnet workload restore

      - name: Build all demos
        run: |
          # Find and publish all executable demo projects (exclude base libraries)
          find demos -name "*.csproj" | while read demo; do
            echo "Checking demo project: $demo"
            
            # Skip if it's a library project (no OutputType=Exe, UseWPF, UseAvalonia executable markers)
            if ! grep -q "<OutputType>Exe</OutputType>\|<OutputType>WinExe</OutputType>" "$demo"; then
              echo "Skipping $demo (not an executable project)"
              continue
            fi
            
            echo "Publishing demo: $demo"
            dotnet publish "$demo" \
              --configuration Release \
              --output "./demos-output/$demo_name"
          done
          
          # List published demos
          echo "Published demos:"
          ls -la ./demos-output/ || echo "No demos published"

      - name: Upload demos artifact
        uses: actions/upload-artifact@v4
        with:
          name: demos
          path: ./demos-output/

  # Job 4: Deploy coverage to GitHub Pages (only on main)
  deploy-coverage:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4