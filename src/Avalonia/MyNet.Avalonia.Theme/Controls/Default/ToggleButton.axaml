<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="http://mynet.com/avalonia"
                    x:CompileBindings="True">
    <ControlTheme x:Key="{x:Type ToggleButton}" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type Button}}">

        <Style Selector="^">
            <Setter Property="my:ThemeAssist.TertiaryColor" Value="{DynamicResource MyNet.Brush.Primary}" />
            <Setter Property="my:ThemeAssist.ActiveBackground" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            <Setter Property="my:ThemeAssist.ActiveForeground" Value="{my:Brush $self.(my:ThemeAssist.ActiveBackground), Contrast=True}" />
        </Style>
        
        <!-- Active -->
        <Style Selector="^:checked">
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />

            <Style Selector="^.Shadow /template/ Border#PART_MainBorder">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Border#PART_ActiveBorder">
                <Setter Property="Opacity" Value="1" />
            </Style>

        </Style>

        <!-- Styles -->
        <Style Selector="^.Solid">
            <Setter Property="Background" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Opacity=0.25}" />
            <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />

            <Style Selector="^:checked">
                <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />
            </Style>
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.ToggleButton.Rounded" TargetType="ToggleButton" BasedOn="{StaticResource MyNet.Theme.Button.Rounded}">

        <Style Selector="^">
            <Setter Property="my:ThemeAssist.TertiaryColor" Value="{DynamicResource MyNet.Brush.Primary}" />
            <Setter Property="my:ThemeAssist.ActiveBackground" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            <Setter Property="my:ThemeAssist.ActiveForeground" Value="{my:Brush $self.(my:ThemeAssist.ActiveBackground), Contrast=True}" />
        </Style>

        <!-- Active -->
        <Style Selector="^:checked">
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />

            <Style Selector="^.Shadow /template/ Ellipse#PART_MainEllipse">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Ellipse#PART_ActiveEllipse">
                <Setter Property="Opacity" Value="1" />
            </Style>
        </Style>

        <!-- Styles -->
        <Style Selector="^.Solid">
            <Setter Property="Background" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Opacity=0.25}" />
            <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />

            <Style Selector="^:checked">
                <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />
            </Style>
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.ToggleButton.Icon" TargetType="ToggleButton" BasedOn="{StaticResource MyNet.Theme.Button.Icon}">

        <Style Selector="^">
            <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />
            <Setter Property="my:ThemeAssist.ActiveForeground" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
        </Style>
        
        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover">
            <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />
        </Style>

        <!-- Active -->
        <Style Selector="^:checked">
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />
            <Setter Property="Opacity" Value="1" />
        </Style>

        <!-- Disabled -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.ToggleButton.CheckBox" TargetType="ToggleButton">
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplate.Icon}" />
        <Setter Property="Padding" Value="{my:Thickness Default, Left}" />
        <Setter Property="my:ToggleButtonAssist.CheckedPath" Value="{StaticResource MyNet.Geometry.CheckboxMarked}" />
        <Setter Property="my:ToggleButtonAssist.IndeterminatePath" Value="{StaticResource MyNet.Geometry.MinusBox}" />
        <Setter Property="my:ToggleButtonAssist.UncheckedPath" Value="{StaticResource MyNet.Geometry.CheckboxBlankOutline}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="my:ThemeAssist.PrimaryColor" Value="{DynamicResource MyNet.Brush.Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brush.Control.Border}" />
        <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
        <Setter Property="my:ThemeAssist.ActiveBackground" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
        <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.(my:ThemeAssist.ActiveBackground), Contrast=True, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        <Setter Property="my:ThemeAssist.HoverBorderBrush" Value="{my:Brush $self.BorderBrush, Contrast=True, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        <Setter Property="FocusAdorner">
            <FocusAdornerTemplate>
                <Rectangle Theme="{StaticResource MyNet.Theme.Rectangle.Focus}" />
            </FocusAdornerTemplate>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel Name="PART_RootPanel">

                        <Viewbox Name="Viewbox"
                                 Width="{StaticResource MyNet.Height.CheckBox.Medium}"
                                 VerticalAlignment="Center"
                                 ClipToBounds="False"
                                 Stretch="Uniform">
                            <my:Ripple Name="PART_Ripple"
                                       IsCentered="True"
                                       RippleFill="{TemplateBinding my:ThemeAssist.RippleColor}"
                                       SizeMultiplier="3">
                                <Panel>
                                    <Path Name="Graphic"
                                          Width="24"
                                          Height="24"
                                          Margin="0" />
                                    <Path Name="GraphicHover"
                                          Width="24"
                                          Height="24"
                                          Margin="0"
                                          IsHitTestVisible="False" />
                                </Panel>
                            </my:Ripple>
                        </Viewbox>

                        <ContentPresenter Name="PART_ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Focusable="False" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style Selector="^:not(.no-transitions) /template/ Path#GraphicHover">
            <Setter Property="Transitions">
                <Transitions>
                    <DoubleTransition Easing="LinearEasing" Property="Opacity" Duration="{StaticResource MyNet.Timespan.Opacity}" />
                </Transitions>
            </Setter>
        </Style>

        <!-- Default state -->
        <Style Selector="^">
            <Style Selector="^ /template/ Path#Graphic">
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.UncheckedPath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].BorderBrush}" />
            </Style>
            <Style Selector="^ /template/ Path#GraphicHover">
                <Setter Property="Opacity" Value="0" />
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.UncheckedPath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].(my:ThemeAssist.HoverBorderBrush)}" />
            </Style>
        </Style>

        <!-- Indeterminate state -->
        <Style Selector="^:indeterminate">
            <Style Selector="^ /template/ Path#Graphic">
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.IndeterminatePath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].(my:ThemeAssist.ActiveBackground)}" />
            </Style>

            <Style Selector="^ /template/ Path#GraphicHover">
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.IndeterminatePath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].(my:ThemeAssist.HoverBackground)}" />
            </Style>
        </Style>

        <!-- Checked state -->
        <Style Selector="^:checked">
            <Style Selector="^ /template/ Path#Graphic">
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.CheckedPath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].(my:ThemeAssist.ActiveBackground)}" />
            </Style>

            <Style Selector="^ /template/ Path#GraphicHover">
                <Setter Property="Data" Value="{Binding $parent[ToggleButton].(my:ToggleButtonAssist.CheckedPath)}" />
                <Setter Property="Fill" Value="{Binding $parent[ToggleButton].(my:ThemeAssist.HoverBackground)}" />
            </Style>
        </Style>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover /template/ Path#GraphicHover">
            <Setter Property="Opacity" Value="1" />
        </Style>

        <!-- RightToLeft content variant -->
        <Style Selector="^.Left /template/ DockPanel#PART_RootPanel > Viewbox">
            <Setter Property="DockPanel.Dock" Value="Right" />
        </Style>

        <!-- Styles -->
        <Style Selector="^.Circle">
            <Setter Property="my:ToggleButtonAssist.CheckedPath" Value="{StaticResource MyNet.Geometry.CheckboxMarkedCircle}" />
            <Setter Property="my:ToggleButtonAssist.IndeterminatePath" Value="{StaticResource MyNet.Geometry.MinusCircle}" />
            <Setter Property="my:ToggleButtonAssist.UncheckedPath" Value="{StaticResource MyNet.Geometry.CheckboxBlankCircleOutline}" />
        </Style>

        <Style Selector="^.Alternate">
            <Setter Property="my:ToggleButtonAssist.CheckedPath" Value="{StaticResource MyNet.Geometry.Check}" />
            <Setter Property="my:ToggleButtonAssist.IndeterminatePath" Value="{StaticResource MyNet.Geometry.Minus}" />
            <Setter Property="my:ToggleButtonAssist.UncheckedPath" Value="{StaticResource MyNet.Geometry.CheckboxBlankCircleOutline}" />
        </Style>

        <!-- Colors -->
        <Style Selector="^.Inverse">
            <Setter Property="BorderBrush" Value="{my:Brush $parent[TemplatedControl].Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
            <Setter Property="my:ThemeAssist.HoverBorderBrush" Value="{my:Brush $parent[TemplatedControl].Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        </Style>

        <!-- Sizes -->
        <Style Selector="^.Small /template/ Viewbox#Viewbox">
            <Setter Property="Width" Value="{StaticResource MyNet.Height.CheckBox.Small}" />
        </Style>
        <Style Selector="^.Medium /template/ Viewbox#Viewbox">
            <Setter Property="Width" Value="{StaticResource MyNet.Height.CheckBox.Medium}" />
        </Style>
        <Style Selector="^.Large /template/ Viewbox#Viewbox">
            <Setter Property="Width" Value="{StaticResource MyNet.Height.CheckBox.Large}" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.ToggleButton.Embedded.Tool" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />
        <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $self.Foreground}" />
        <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.Foreground}" />
        <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Tool}" />
        <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Tool}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="ContentTemplate">
            <DataTemplate DataType="{x:Type Geometry}">
                <PathIcon Width="{StaticResource MyNet.Size.Icon.Tool}"
                          Height="{StaticResource MyNet.Size.Icon.Tool}"
                          Classes="ExtraSmall"
                          Data="{Binding}" />
            </DataTemplate>
        </Setter>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover,^:not(:disabled):checked">
            <Setter Property="Opacity" Value="1" />
        </Style>

        <!-- Styles -->
        <Style Selector="^.Stretch">
            <Setter Property="CornerRadius" Value="0" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="Padding" Value="{my:Thickness Default, Horizontal}" />
            <Setter Property="Height" Value="NaN" />
            <Setter Property="Width" Value="NaN" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.ToggleButton.Clean" TargetType="ToggleButton">
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Template">
            <ControlTemplate TargetType="ToggleButton">
                <ContentPresenter Name="PART_ContentPresenter"
                                  Padding="{TemplateBinding Padding}"
                                  HorizontalContentAlignment="Stretch"
                                  VerticalContentAlignment="Stretch"
                                  Content="{TemplateBinding Content}"
                                  Foreground="{TemplateBinding Foreground}">
                    <ContentPresenter.Background>
                        <SolidColorBrush Opacity="0.002" Color="White" />
                    </ContentPresenter.Background>
                </ContentPresenter>
            </ControlTemplate>
        </Setter>
    </ControlTheme>
</ResourceDictionary>
