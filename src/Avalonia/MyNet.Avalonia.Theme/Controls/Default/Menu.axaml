<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="using:Avalonia.Controls.Converters"
                    xmlns:my="http://mynet.com/avalonia"
                    xmlns:sys="clr-namespace:System;assembly=netstandard"
                    x:CompileBindings="True">

    <c:PlatformKeyGestureConverter x:Key="KeyGestureConverter" />

    <!-- ScrollViewer -->
    <ControlTheme x:Key="MyNet.Theme.RepeatButton.Embedded.ScrollViewer.Menu" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Focusable" Value="False" />
    </ControlTheme>
    <ControlTheme x:Key="MyNet.Theme.ScrollViewer.Embedded.Menu" TargetType="ScrollViewer">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <ControlTemplate TargetType="ScrollViewer">
                <DockPanel>
                    <RepeatButton MinHeight="0"
                                  Padding="{my:Thickness Small}"
                                  HorizontalAlignment="Stretch"
                                  Classes="Text"
                                  Command="{Binding LineUp, RelativeSource={RelativeSource TemplatedParent}}"
                                  CornerRadius="0"
                                  DockPanel.Dock="Top"
                                  RenderTransform="{x:Null}"
                                  Theme="{StaticResource MyNet.Theme.RepeatButton.Embedded.ScrollViewer.Menu}">
                        <RepeatButton.IsVisible>
                            <MultiBinding Converter="{x:Static c:MenuScrollingVisibilityConverter.Instance}" ConverterParameter="0">
                                <Binding Path="VerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Offset.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Extent.Height" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Viewport.Height" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </RepeatButton.IsVisible>
                        <PathIcon Classes="ExtraSmall" Data="{StaticResource MyNet.Geometry.ChevronUp}" Foreground="{TemplateBinding Foreground}" />
                    </RepeatButton>
                    <RepeatButton MinHeight="0"
                                  Padding="{my:Thickness Small}"
                                  HorizontalAlignment="Stretch"
                                  Classes="Text"
                                  Command="{Binding LineDown, RelativeSource={RelativeSource TemplatedParent}}"
                                  CornerRadius="0"
                                  DockPanel.Dock="Bottom"
                                  RenderTransform="{x:Null}"
                                  Theme="{StaticResource MyNet.Theme.RepeatButton.Embedded.ScrollViewer.Menu}">
                        <RepeatButton.IsVisible>
                            <MultiBinding Converter="{x:Static c:MenuScrollingVisibilityConverter.Instance}" ConverterParameter="100">
                                <Binding Path="VerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Offset.Y" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Extent.Height" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Viewport.Height" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </RepeatButton.IsVisible>
                        <PathIcon Classes="ExtraSmall" Data="{StaticResource MyNet.Geometry.ChevronDown}" Foreground="{TemplateBinding Foreground}" />
                    </RepeatButton>
                    <ScrollContentPresenter Name="PART_ContentPresenter"
                                            Margin="{TemplateBinding Padding}"
                                            HorizontalSnapPointsAlignment="{TemplateBinding HorizontalSnapPointsAlignment}"
                                            HorizontalSnapPointsType="{TemplateBinding HorizontalSnapPointsType}"
                                            VerticalSnapPointsAlignment="{TemplateBinding VerticalSnapPointsAlignment}"
                                            VerticalSnapPointsType="{TemplateBinding VerticalSnapPointsType}">
                        <ScrollContentPresenter.GestureRecognizers>
                            <ScrollGestureRecognizer CanHorizontallyScroll="{Binding CanHorizontallyScroll, ElementName=PART_ContentPresenter}" CanVerticallyScroll="{Binding CanVerticallyScroll, ElementName=PART_ContentPresenter}" IsScrollInertiaEnabled="{Binding IsScrollInertiaEnabled, RelativeSource={RelativeSource TemplatedParent}}" />
                        </ScrollContentPresenter.GestureRecognizers>
                    </ScrollContentPresenter>
                </DockPanel>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!-- Separator -->
    <ControlTheme x:Key="{x:Type Separator}" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Control.Border}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="{my:Thickness Default, Vertical}" />
        <Setter Property="Template">
            <ControlTemplate TargetType="Separator">
                <Border Height="{TemplateBinding Height}"
                        Padding="{TemplateBinding Margin}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}" />
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!-- MenuItem -->
    <ControlTheme x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        <Setter Property="my:ThemeAssist.ActiveForeground" Value="{DynamicResource MyNet.Brush.Primary}" />
        <!-- Narrow padding should be used for mouse input, when non-narrow one should be used for touch input in future. -->
        <Setter Property="Padding" Value="{StaticResource MyNet.Padding.MenuItem}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Menu}" />
        <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.FontFamily}" />
        <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight}" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel Name="PART_RootPanel">

                    <Border Name="PART_MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                    <Border Name="PART_HoverBorder"
                            Background="{TemplateBinding my:ThemeAssist.HoverBackground}"
                            BorderBrush="{TemplateBinding my:ThemeAssist.HoverBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Theme="{StaticResource MyNet.Theme.Border.State}" />

                    <my:Ripple Name="PART_Ripple" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleIcon" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIcon" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGT" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemChevron" />
                            </Grid.ColumnDefinitions>

                            <ContentControl Name="PART_ToggleIconPresenter"
                                            Grid.Column="0"
                                            Width="{StaticResource MyNet.Size.Icon.Small}"
                                            Height="{StaticResource MyNet.Size.Icon.Small}"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Foreground="{TemplateBinding my:ThemeAssist.ActiveForeground}"
                                            IsVisible="False" />

                            <Viewbox Name="PART_IconPresenter"
                                     Grid.Column="1"
                                     Margin="{my:Thickness Medium,
                                                           Horizontal}"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"
                                     IsVisible="False"
                                     Stretch="Uniform">
                                <ContentPresenter Width="{StaticResource MyNet.Size.Icon.Small}"
                                                  Height="{StaticResource MyNet.Size.Icon.Small}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Content="{TemplateBinding Icon}"
                                                  Foreground="{TemplateBinding Foreground}" />
                            </Viewbox>

                            <ContentPresenter Name="PART_HeaderPresenter"
                                              Grid.Column="2"
                                              Margin="{my:Thickness Medium,
                                                                    Horizontal}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              RecognizesAccessKey="True" />
                            <TextBlock Name="PART_InputGestureText"
                                       Grid.Column="3"
                                       Margin="{my:Thickness Medium,
                                                             Horizontal}"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Center"
                                       FontSize="{StaticResource MyNet.Font.Size.SubCaption}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                       Text="{TemplateBinding InputGesture, Converter={StaticResource KeyGestureConverter}}" />
                            <PathIcon Name="PART_ExpandIcon"
                                      Grid.Column="4"
                                      Width="{StaticResource MyNet.Size.Glyph.Medium}"
                                      Height="{StaticResource MyNet.Size.Glyph.Medium}"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource MyNet.Geometry.ChevronRight}"
                                      Foreground="{TemplateBinding Foreground}" />
                        </Grid>
                    </my:Ripple>
                    <Popup Name="PART_Popup"
                           HorizontalOffset="5"
                           IsLightDismissEnabled="False"
                           IsOpen="{TemplateBinding IsSubMenuOpen, Mode=TwoWay}"
                           Placement="RightEdgeAlignedTop"
                           VerticalOffset="-2"
                           WindowManagerAddShadowHint="False">
                        <Border MaxHeight="{StaticResource MyNet.MaxHeight.Menu}" Theme="{StaticResource MyNet.Theme.Border.Popup}">
                            <Border ClipToBounds="True" CornerRadius="{StaticResource MyNet.CornerRadius.Popup}">
                                <ScrollViewer Theme="{StaticResource MyNet.Theme.ScrollViewer.Embedded.Menu}">
                                    <ItemsPresenter Name="PART_ItemsPresenter"
                                                    Grid.IsSharedSizeScope="True"
                                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                                    KeyboardNavigation.TabNavigation="Continue" />
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </Popup>
                </Panel>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:icon /template/ Viewbox#PART_IconPresenter">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^:empty /template/ PathIcon#PART_ExpandIcon">
            <Setter Property="IsVisible" Value="False" />
        </Style>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):selected">
            <Style Selector="^ /template/ Border#PART_HoverBorder">
                <Setter Property="Opacity" Value="1" />
            </Style>
        </Style>

        <!-- Separator -->
        <Style Selector="^:separator">
            <Setter Property="Template">
                <ControlTemplate>
                    <Separator />
                </ControlTemplate>
            </Setter>
        </Style>

        <!-- Checked -->
        <Style Selector="^:checked:toggle /template/ ContentControl#PART_ToggleIconPresenter">
            <Setter Property="IsVisible" Value="True" />
            <Setter Property="Content">
                <Template>
                    <PathIcon Classes="ExtraSmall" Data="{StaticResource MyNet.Geometry.Check}" />
                </Template>
            </Setter>
        </Style>

        <!-- Checked (Radio) -->
        <Style Selector="^:checked:radio /template/ ContentControl#PART_ToggleIconPresenter">
            <Setter Property="IsVisible" Value="True" />
            <Setter Property="Content">
                <Template>
                    <PathIcon Classes="ExtraSmall" Data="{StaticResource MyNet.Geometry.CircleSmall}" />
                </Template>
            </Setter>
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.MenuItem.TopLevel" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Template">
            <ControlTemplate>
                <Panel Name="PART_RootPanel">

                    <Border Name="PART_MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                    <Border Name="PART_HoverBorder"
                            Background="{TemplateBinding my:ThemeAssist.HoverBackground}"
                            BorderBrush="{TemplateBinding my:ThemeAssist.HoverBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Theme="{StaticResource MyNet.Theme.Border.State}" />

                    <Border ClipToBounds="True" CornerRadius="{TemplateBinding CornerRadius}">
                        <my:Ripple Name="PART_Ripple">
                            <ContentPresenter Name="PART_HeaderPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              RecognizesAccessKey="True" />
                        </my:Ripple>
                    </Border>
                    <Popup Name="PART_Popup"
                           MinWidth="{Binding $parent[MenuItem].Bounds.Width}"
                           HorizontalOffset="-2"
                           IsLightDismissEnabled="True"
                           IsOpen="{TemplateBinding IsSubMenuOpen, Mode=TwoWay}"
                           OverlayInputPassThroughElement="{Binding $parent[Menu]}"
                           Placement="BottomEdgeAlignedLeft"
                           VerticalOffset="2"
                           WindowManagerAddShadowHint="False">
                        <Border MaxHeight="{StaticResource MyNet.MaxHeight.Menu}" Theme="{StaticResource MyNet.Theme.Border.Popup}">
                            <Border ClipToBounds="True" CornerRadius="{StaticResource MyNet.CornerRadius.Popup}">
                                <ScrollViewer Theme="{StaticResource MyNet.Theme.ScrollViewer.Embedded.Menu}">
                                    <ItemsPresenter Name="PART_ItemsPresenter"
                                                    Grid.IsSharedSizeScope="True"
                                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                                    KeyboardNavigation.TabNavigation="Continue" />
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </Popup>
                </Panel>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.MenuItem.Horizontal" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Padding" Value="{StaticResource MyNet.Padding.MenuItem.Horizontal}" />
        <Setter Property="Margin" Value="2 0 2 0" />
    </ControlTheme>

    <!-- Menu -->
    <ControlTheme x:Key="{x:Type Menu}" TargetType="Menu">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerTheme" Value="{StaticResource MyNet.Theme.MenuItem.TopLevel}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Menu}" />
        <Setter Property="Template">
            <ControlTemplate TargetType="Menu">
                <Border Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        ClipToBounds="True"
                        CornerRadius="{TemplateBinding CornerRadius}">
                    <ItemsPresenter Name="PART_ItemsPresenter"
                                    VerticalAlignment="Stretch"
                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                    KeyboardNavigation.TabNavigation="Continue" />
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!-- ContextMenu -->
    <ControlTheme x:Key="{x:Type ContextMenu}" TargetType="ContextMenu">
        <Setter Property="my:ShadowAssist.ShadowDepth" Value="{StaticResource MyNet.ShadowDepth.Popup}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brush.Popup.Border}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Popup.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Popup}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margin.Popup}" />
        <Setter Property="MaxHeight" Value="{StaticResource MyNet.MaxHeight.Menu}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="WindowManagerAddShadowHint" Value="False" />
        <Setter Property="Template">
            <ControlTemplate TargetType="ContextMenu">
                <Border MinHeight="{TemplateBinding MinHeight}"
                        MaxWidth="{TemplateBinding MaxWidth}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Theme="{StaticResource MyNet.Theme.Border.Popup}">
                    <Border ClipToBounds="True" CornerRadius="{StaticResource MyNet.CornerRadius.Popup}">
                        <ScrollViewer Theme="{StaticResource MyNet.Theme.ScrollViewer.Embedded.Menu}">
                            <ItemsPresenter Name="PART_ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            ItemsPanel="{TemplateBinding ItemsPanel}"
                                            KeyboardNavigation.TabNavigation="Continue" />
                        </ScrollViewer>
                    </Border>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!-- Flyouts -->
    <ControlTheme x:Key="{x:Type FlyoutPresenter}" TargetType="FlyoutPresenter">
        <Setter Property="my:ShadowAssist.ShadowDepth" Value="{StaticResource MyNet.ShadowDepth.Popup}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brush.Popup.Border}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Popup.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Popup}" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Padding.Popup}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Container}" />
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Container}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margin.Popup}" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Template">
            <ControlTemplate TargetType="FlyoutPresenter">
                <Border Margin="{TemplateBinding Margin}"
                        my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Theme="{StaticResource MyNet.Theme.Border.Popup}">
                    <Border ClipToBounds="True" CornerRadius="{StaticResource MyNet.CornerRadius.Popup}">
                        <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalContentAlignment="Stretch"
                                              VerticalContentAlignment="Stretch"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </ScrollViewer>
                    </Border>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <ControlTheme x:Key="{x:Type MenuFlyoutPresenter}" TargetType="MenuFlyoutPresenter">
        <Setter Property="my:ShadowAssist.ShadowDepth" Value="{StaticResource MyNet.ShadowDepth.Popup}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brush.Popup.Border}" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Popup.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Popup}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margin.Popup}" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Template">
            <ControlTemplate TargetType="MenuFlyoutPresenter">
                <Border Margin="{TemplateBinding Margin}"
                        my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Theme="{StaticResource MyNet.Theme.Border.Popup}">
                    <Border ClipToBounds="True" CornerRadius="{StaticResource MyNet.CornerRadius.Popup}">
                        <ScrollViewer CornerRadius="{TemplateBinding CornerRadius}"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      Theme="{StaticResource MyNet.Theme.ScrollViewer.Embedded.Menu}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter Name="PART_ItemsPresenter"
                                            Margin="{TemplateBinding Padding}"
                                            Grid.IsSharedSizeScope="True"
                                            ItemsPanel="{TemplateBinding ItemsPanel}"
                                            KeyboardNavigation.TabNavigation="Continue" />
                        </ScrollViewer>
                    </Border>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.MenuFlyoutPresenter.Horizontal" TargetType="MenuFlyoutPresenter" BasedOn="{StaticResource {x:Type MenuFlyoutPresenter}}">
        <Setter Property="MinWidth" Value="32" />
        <Setter Property="Padding" Value="8 0" />
        <Setter Property="ItemsPanel">
            <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
        </Setter>
    </ControlTheme>

    <MenuFlyout x:Key="MyNet.MenuFlyout.Text" x:DataType="sys:Object" FlyoutPresenterTheme="{StaticResource {x:Type MenuFlyoutPresenter}}">
        <MenuItem Name="MyNet.MenuItem.Cut"
                  Command="{Binding $parent[TextBox].Cut}"
                  Header="{my:Resource Cut}"
                  Icon="{my:Icon ContentCut}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=cut}"
                  IsEnabled="{Binding $parent[TextBox].CanCut}" />
        <MenuItem Name="MyNet.MenuItem.Copy"
                  Command="{Binding $parent[TextBox].Copy}"
                  Header="{my:Resource Copy}"
                  Icon="{my:Icon ContentCopy}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=copy}"
                  IsEnabled="{Binding $parent[TextBox].CanCopy}" />
        <MenuItem Name="MyNet.MenuItem.Paste"
                  Command="{Binding $parent[TextBox].Paste}"
                  Header="{my:Resource Paste}"
                  Icon="{my:Icon ContentPaste}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=paste}"
                  IsEnabled="{Binding $parent[TextBox].CanPaste}" />
        <Separator />
        <MenuItem Name="MyNet.MenuItem.Undo"
                  Command="{Binding $parent[TextBox].Undo}"
                  Header="{my:Resource Undo}"
                  Icon="{my:Icon Undo}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=undo}"
                  IsEnabled="{Binding $parent[TextBox].CanUndo}" />
        <MenuItem Name="MyNet.MenuItem.Redo"
                  Command="{Binding $parent[TextBox].Redo}"
                  Header="{my:Resource Redo}"
                  Icon="{my:Icon Redo}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=redo}"
                  IsEnabled="{Binding $parent[TextBox].CanRedo}" />
        <Separator />
        <MenuItem Name="MyNet.MenuItem.SelectAll"
                  Command="{Binding $parent[TextBox].SelectAll}"
                  Header="{my:Resource SelectAll}"
                  Icon="{my:Icon SelectAll}"
                  InputGesture="{Binding Converter={x:Static my:KeyGesturesConverter.Default}, ConverterParameter=selectall}" />
    </MenuFlyout>

    <MenuFlyout x:Key="MyNet.MenuFlyout.Text.Horizontal"
                x:DataType="sys:Object"
                FlyoutPresenterTheme="{StaticResource MyNet.MenuFlyoutPresenter.Horizontal}"
                ItemContainerTheme="{StaticResource MyNet.Theme.MenuItem.Horizontal}">
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.Cut"
                  Command="{Binding $parent[TextBox].Cut}"
                  Header="{my:Resource Cut}"
                  IsEnabled="{Binding $parent[TextBox].CanCut}"
                  IsVisible="{Binding $parent[TextBox].CanCut}" />
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.Copy"
                  Command="{Binding $parent[TextBox].Copy}"
                  Header="{my:Resource Copy}"
                  IsEnabled="{Binding $parent[TextBox].CanCopy}"
                  IsVisible="{Binding $parent[TextBox].CanCopy}" />
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.Paste"
                  Command="{Binding $parent[TextBox].Paste}"
                  Header="{my:Resource Paste}"
                  IsEnabled="{Binding $parent[TextBox].CanPaste}" />
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.Undo"
                  Command="{Binding $parent[TextBox].Undo}"
                  Header="{my:Resource Undo}"
                  IsEnabled="{Binding $parent[TextBox].CanUndo}" />
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.Redo"
                  Command="{Binding $parent[TextBox].Redo}"
                  Header="{my:Resource Redo}"
                  IsEnabled="{Binding $parent[TextBox].CanRedo}" />
        <MenuItem x:Name="MyNet.MenuItem.Horizontal.SelectAll" Command="{Binding $parent[TextBox].SelectAll}" Header="{my:Resource SelectAll}" />
    </MenuFlyout>
</ResourceDictionary>
