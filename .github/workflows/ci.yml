name: CI - Build and Test

on:
  push:
    branches: [ "main", "feature/*", "hotfix/*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read       # Required to checkout code
  pages: write         # Required to publish to GitHub Pages
  id-token: write      # Required for OIDC authentication
  checks: write        # Required to publish test results
  pull-requests: write # Required to comment on PRs
  actions: read        # Required to read workflow runs

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:

  # Job 1: Build non-WPF projects on Linux
  build-core-projects:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Restore non-WPF dependencies
        run: |
          # Restore core projects (exclude WPF)
          find src -name "*.csproj" -not -path "*/Wpf/*" | while read project; do
            echo "Restoring: $project"
            dotnet restore "$project"
          done
          
          # Restore test projects
          find tests -name "*.csproj" | while read project; do
            echo "Restoring test: $project"
            dotnet restore "$project"
          done

      - name: Build non-WPF projects
        run: |
          # Build core projects
          find src -name "*.csproj" -not -path "*/Wpf/*" | while read project; do
            echo "Building: $project"
            dotnet build "$project" --configuration Release --no-restore
          done
          
          # Build test projects
          find tests -name "*.csproj" | while read project; do
            echo "Building test: $project"
            dotnet build "$project" --configuration Release --no-restore
          done

      - name: Run tests with coverage
        run: |
          # Create results directory
          mkdir -p ./TestResults
          
          # Run tests with coverage collection using Directory.Build.targets configuration
          dotnet test --no-build --configuration Release \
            --collect:"XPlat Code Coverage" \
            --settings .runsettings \
            --logger "trx" \
            --logger "GitHubActions;report-warnings=false" \
            --results-directory ./TestResults
          
          echo "üìã Test results generated:"
          find ./TestResults -name "*.trx" | head -10
          echo "üìã Coverage files from Directory.Build.targets:"
          find ./TestResults -name "*.cobertura.xml" 2>/dev/null | head -10 || echo "No coverage files found yet"

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'TestResults/Coverage/**/*.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;MarkdownSummaryGithub'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: TestResults/Coverage/**/*.cobertura.xml
          fail_ci_if_error: false
          verbose: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          files: TestResults/**/*.trx
          check_name: 'Test Results'
          comment_mode: changes
          fail_on: 'test failures'

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-linux
          path: coveragereport

      - name: Upload auto-generated packages (core)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages-core
          path: |
            packages/*.nupkg

  # Job 2: Build WPF projects on Windows
  build-wpf-projects:
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Restore WPF dependencies
        run: |
          # Restore WPF projects using PowerShell
          Get-ChildItem -Path "src/Wpf" -Filter "*.csproj" -Recurse | ForEach-Object {
            Write-Host "Restoring: $($_.FullName)"
            dotnet restore "$($_.FullName)"
          }

      - name: Build WPF projects
        run: |
          # Build WPF projects using PowerShell
          Get-ChildItem -Path "src/Wpf" -Filter "*.csproj" -Recurse | ForEach-Object {
            Write-Host "Building: $($_.FullName)"
            dotnet build "$($_.FullName)" --configuration Release --no-restore
          }

      - name: Upload auto-generated packages (WPF)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages-wpf
          path: |
            packages/*.nupkg

  # Job 3: Build Avalonia demos on Linux  
  build-avalonia-demos:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install workloads
        run: |
          dotnet workload install wasm-tools
          dotnet workload install android
          dotnet workload restore

      - name: Restore and build Avalonia demos
        run: |
          echo "üéØ Building Avalonia demos..."
          
          # Restore and build main Avalonia demo
          if [ -f "demos/MyNet.Avalonia.Demo/MyNet.Avalonia.Demo.csproj" ]; then
            echo "üì± Building: MyNet.Avalonia.Demo"
            dotnet build "demos/MyNet.Avalonia.Demo/MyNet.Avalonia.Demo.csproj" --configuration Release
          fi
          
          # Restore and build Desktop demo
          if [ -f "demos/MyNet.Avalonia.Demo.Desktop/MyNet.Avalonia.Demo.Desktop.csproj" ]; then
            echo "üñ•Ô∏è  Building: MyNet.Avalonia.Demo.Desktop"
            dotnet build "demos/MyNet.Avalonia.Demo.Desktop/MyNet.Avalonia.Demo.Desktop.csproj" --configuration Release
          fi
          
          # Restore and build Browser demo
          if [ -f "demos/MyNet.Avalonia.Demo.Browser/MyNet.Avalonia.Demo.Browser.csproj" ]; then
            echo "üåê Building: MyNet.Avalonia.Demo.Browser"
            dotnet build "demos/MyNet.Avalonia.Demo.Browser/MyNet.Avalonia.Demo.Browser.csproj" --configuration Release
          fi
          
          echo "‚úÖ Avalonia demos build completed!"

      - name: Publish Avalonia demos
        run: |
          mkdir -p publish/avalonia
          
          # Publish Desktop demo
          if [ -f "demos/MyNet.Avalonia.Demo.Desktop/MyNet.Avalonia.Demo.Desktop.csproj" ]; then
            echo "üì¶ Publishing Desktop demo..."
            dotnet publish "demos/MyNet.Avalonia.Demo.Desktop/MyNet.Avalonia.Demo.Desktop.csproj" \
              --configuration Release \
              --output publish/avalonia/desktop \
              --no-build
          fi
          
          # Publish Browser demo
          if [ -f "demos/MyNet.Avalonia.Demo.Browser/MyNet.Avalonia.Demo.Browser.csproj" ]; then
            echo "üì¶ Publishing Browser demo..."
            dotnet publish "demos/MyNet.Avalonia.Demo.Browser/MyNet.Avalonia.Demo.Browser.csproj" \
              --configuration Release \
              --output publish/avalonia/browser \
              --no-build
          fi

      - name: Upload Avalonia demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: avalonia-demos
          path: |
            publish/avalonia/**

  # Job 4: Build WPF demos on Windows
  build-wpf-demos:
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Restore and build WPF demos
        run: |
          Write-Host "üéØ Building WPF demos..."
          
          # Find and build WPF demo projects
          Get-ChildItem -Path "demos" -Filter "*Wpf*.csproj" -Recurse | ForEach-Object {
            Write-Host "üñ•Ô∏è  Building: $($_.Name)"
            dotnet build "$($_.FullName)" --configuration Release
          }
          
          Write-Host "‚úÖ WPF demos build completed!"

      - name: Publish WPF demos
        run: |
          New-Item -ItemType Directory -Path "published-demos/wpf" -Force
          
          # Publish WPF demo projects
          Get-ChildItem -Path "demos" -Filter "*Wpf*.csproj" -Recurse | ForEach-Object {
            $projectName = $_.BaseName
            Write-Host "üì¶ Publishing: $projectName"
            
            dotnet publish "$($_.FullName)" `
              --configuration Release `
              --output "published-demos/wpf/$projectName" `
              --no-build
          }

      - name: Upload WPF demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wpf-demos
          path: |
            publish/wpf/**

  # Job 5: Collect and publish results
  publish-results:
    runs-on: ubuntu-latest
    needs: [build-core-projects, build-wpf-projects, build-avalonia-demos, build-wpf-demos]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts summary
        run: |
          echo "üì¶ All artifacts downloaded:"
          find artifacts -type f -name "*.nupkg" -o -name "*.exe" -o -name "*.dll" | head -20
          echo ""
          echo "üìä Artifacts summary:"
          echo "  NuGet packages: $(find artifacts -name "*.nupkg" | wc -l)"
          echo "  Demo executables: $(find artifacts -name "*.exe" | wc -l)"
          echo "  Coverage reports: $(find artifacts -name "coverage-report-linux" -type d | wc -l)"

      - name: Upload consolidated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: final-release-bundle
          path: artifacts/**

      - name: Display build summary
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Core Projects | ${{ needs.build-core-projects.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WPF Projects | ${{ needs.build-wpf-projects.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Avalonia Demos | ${{ needs.build-avalonia-demos.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WPF Demos | ${{ needs.build-wpf-demos.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üì¶ Artifacts Generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- NuGet Packages: $(find artifacts -name "*.nupkg" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Demo Executables: $(find artifacts -name "*.exe" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Reports: Available" >> $GITHUB_STEP_SUMMARY