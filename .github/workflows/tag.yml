name: Manual - Tag Projects

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run - Only show what would be tagged without creating tags'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_all:
        description: 'Force tag all projects regardless of changes'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write      # Required to create tags

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  detect-and-tag:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git history and NBGV
          token: ${{ secrets.GITHUB_TOKEN }} # Use PAT if available: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install NBGV tool
        run: dotnet tool install -g nbgv

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Find packable projects
        id: find-projects
        run: |
          echo "Finding all packable projects..."

          # Find all .csproj files in src directory (exclude demos and tests)
          all_projects=$(find src -name "*.csproj" -not -path "*/Demo*" -not -path "*/Test*" | sort)

          # Exclude projects with <IsPackable>false</IsPackable>
          packable_projects=""
          for project in $all_projects; do
            if ! grep -q '<IsPackable>\s*false' "$project"; then
              packable_projects="$packable_projects$project\n"
            fi
          done

          echo "Found packable projects:"
          echo -e "$packable_projects"

          # Save projects list for later steps
          echo -e "$packable_projects" > projects.txt

          # Convert to JSON array for matrix strategy if needed
          projects_json=$(echo -e "$packable_projects" | jq -R -s -c 'split("\n")[:-1]')
          echo "projects=$projects_json" >> $GITHUB_OUTPUT

      - name: Get last release tags
        id: get-tags
        run: |
          echo "Getting existing tags..."
          git tag -l "v*" --sort=-version:refname > existing_tags.txt
          echo "Existing tags:"
          cat existing_tags.txt

      - name: Analyze changes and determine versions
        id: analyze
        run: |
          echo "Analyzing changes since last tags..."
          
          declare -A projects_to_tag
          declare -A project_versions
          
          while IFS= read -r project_path; do
            [ -z "$project_path" ] && continue
            
            echo "----------------------------------------"
            echo "Analyzing: $project_path"
            
            # Extract project name from path
            project_name=$(basename "$project_path" .csproj)
            project_dir=$(dirname "$project_path")
            
            echo "Project: $project_name"
            echo "Directory: $project_dir"
            
            # Get version from NBGV for this project
            cd "$project_dir"
            version=$(nbgv get-version -v SimpleVersion 2>/dev/null || echo "1.0.0")
            simple_version=$(nbgv get-version -v SimpleVersion 2>/dev/null || echo "1.0.0")
            cd - > /dev/null
            
            echo "Current version: $version"
            
            # Check if tag already exists for this version
            tag_name="$project_name/v$simple_version"
            
            if git tag -l | grep -q "^$tag_name$"; then
              echo "Tag $tag_name already exists"
              
              # Check for changes since this tag
              if [ "${{ inputs.force_all }}" = "true" ]; then
                echo "Force mode: Will retag"
                projects_to_tag["$project_name"]="$tag_name"
                project_versions["$project_name"]="$simple_version"
              else
                # Check if there are changes since the tag
                if git diff --quiet "$tag_name" HEAD -- "$project_dir/"; then
                  echo "No changes since tag $tag_name"
                else
                  echo "Changes detected since tag $tag_name"
                  projects_to_tag["$project_name"]="$tag_name"
                  project_versions["$project_name"]="$simple_version"
                fi
              fi
            else
              echo "Tag $tag_name does not exist"
              
              if [ "${{ inputs.force_all }}" = "true" ]; then
                echo "Force mode: Will tag"
                projects_to_tag["$project_name"]="$tag_name"
                project_versions["$project_name"]="$simple_version"
              else
                # Find the last tag for this project
                last_tag=$(git tag -l "$project_name/v*" --sort=-version:refname | head -n1)
                
                if [ -z "$last_tag" ]; then
                  echo "No previous tag found for $project_name, will tag"
                  projects_to_tag["$project_name"]="$tag_name"
                  project_versions["$project_name"]="$simple_version"
                else
                  echo "Last tag for $project_name: $last_tag"
                  
                  # Check for changes since last tag
                  if git diff --quiet "$last_tag" HEAD -- "$project_dir/" ":(exclude)$project_dir/*.md"; then
                    echo "No changes since $last_tag"
                  else
                    echo "Changes detected since $last_tag"
                    projects_to_tag["$project_name"]="$tag_name"
                    project_versions["$project_name"]="$simple_version"
                  fi
                fi
              fi
            fi
          done < projects.txt
          
          echo "----------------------------------------"
          echo "SUMMARY OF PROJECTS TO TAG:"
          
          if [ ${#projects_to_tag[@]} -eq 0 ]; then
            echo "No projects need to be tagged."
          else
            for project in "${!projects_to_tag[@]}"; do
              echo "- $project -> ${projects_to_tag[$project]} (v${project_versions[$project]})"
            done
          fi
          
          # Save results for next step
          for project in "${!projects_to_tag[@]}"; do
            echo "$project:${projects_to_tag[$project]}:${project_versions[$project]}" >> projects_to_tag.txt
          done
          
          # Set output for conditional execution
          if [ ${#projects_to_tag[@]} -gt 0 ]; then
            echo "has_projects_to_tag=true" >> $GITHUB_OUTPUT
          else
            echo "has_projects_to_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tags
        if: steps.analyze.outputs.has_projects_to_tag == 'true'
        run: |
          echo "Creating tags..."
          
          if [ ! -f "projects_to_tag.txt" ]; then
            echo "No projects to tag file found"
            exit 0
          fi
          
          while IFS=':' read -r project tag_name version; do
            [ -z "$project" ] && continue
            
            echo "----------------------------------------"
            echo "Processing: $project"
            echo "Tag: $tag_name"
            echo "Version: $version"
            
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "DRY RUN: Would create tag $tag_name"
            else
              echo "Creating tag: $tag_name"
              
              # Create annotated tag
              git tag -a "$tag_name" -m "Release $project v$version

              This release was automatically created by GitHub Actions.
              
              Project: $project
              Version: $version
              Commit: $(git rev-parse HEAD)
              "
              
              echo "Tag $tag_name created successfully"
            fi
          done < projects_to_tag.txt
          
          if [ "${{ inputs.dry_run }}" = "false" ]; then
            echo "Pushing all tags to origin..."
            
            # Push tags one by one to ensure proper processing
            while IFS=':' read -r project tag_name version; do
              [ -z "$project" ] && continue
              
              echo "Pushing tag: $tag_name"
              
              # Push the tag using git
              git push origin "$tag_name"
              
              # Trigger release workflow via repository dispatch
              echo "Triggering release workflow for $tag_name..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/dispatches" \
                -d "{\"event_type\":\"tag_created\",\"client_payload\":{\"tag\":\"$tag_name\",\"project\":\"$project\",\"version\":\"$version\"}}"
              
              # Small delay to ensure GitHub processes the tag
              sleep 3
              
            done < projects_to_tag.txt
            
            echo "All tags pushed successfully and release workflows triggered"
          else
            echo "DRY RUN: Tags were not actually created or pushed"
          fi

      - name: Summary
        run: |
          echo "=========================================="
          echo "TAGGING SUMMARY"
          echo "=========================================="
          echo "Mode: ${{ inputs.dry_run == 'true' && 'DRY RUN' || 'LIVE' }}"
          echo "Force all: ${{ inputs.force_all }}"
          echo ""
          
          if [ -f "projects_to_tag.txt" ] && [ -s "projects_to_tag.txt" ]; then
            echo "Projects processed:"
            while IFS=':' read -r project tag_name version; do
              [ -z "$project" ] && continue
              if [ "${{ inputs.dry_run }}" = "true" ]; then
                echo "  - $project -> $tag_name (DRY RUN)"
              else
                echo "  - $project -> $tag_name (TAGGED)"
              fi
            done < projects_to_tag.txt
          else
            echo "No projects needed tagging."
          fi
          
          echo ""
          echo "=========================================="
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "This was a dry run. No tags were actually created."
            echo "To create the tags, run this workflow again with 'Dry run' set to 'false'."
          fi
