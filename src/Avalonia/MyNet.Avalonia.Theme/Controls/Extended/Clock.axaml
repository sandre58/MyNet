<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="http://mynet.com/avalonia"
                    xmlns:c="using:MyNet.Avalonia.Theme.Converters"
                    x:CompileBindings="True">

    <ControlTheme x:Key="{x:Type my:Clock}" TargetType="my:Clock">
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="{my:Thickness Default}" />
        <Setter Property="my:ShadowAssist.ShadowDepth" Value="Depth0" />

        <Style Selector="^">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{my:Brush $self.Foreground}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="TickBrush" Value="{DynamicResource MyNet.Brush.Control.Border.Focus}" />
            <Setter Property="HourHandBrush" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="MinuteHandBrush" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="SecondHandBrush" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="CenterBackground" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="CenterBorderBrush" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="CenterBorderThickness" Value="0" />
        </Style>

        <Setter Property="Template">
            <ControlTemplate TargetType="my:Clock">
                <Grid>
                    <Ellipse my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                             Fill="{TemplateBinding Background}"
                             Stroke="{TemplateBinding BorderBrush}"
                             StrokeThickness="{TemplateBinding BorderThickness, Converter={x:Static my:ThicknessToDoubleConverter.Left}}" />
                    <Grid Margin="{TemplateBinding Padding}">
                        <my:ClockTicks Margin="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                       HourTickForeground="{TemplateBinding TickBrush}"
                                       MinuteTickForeground="{my:Brush TickBrush,
                                                                       RelativeSource={RelativeSource TemplatedParent},
                                                                       Opacity={StaticResource MyNet.Opacity.Secondary}}"
                                       ShowHourTicks="{TemplateBinding ShowHourTicks}"
                                       ShowMinuteTicks="{TemplateBinding ShowMinuteTicks}" />
                        <UniformGrid IsVisible="{TemplateBinding ShowHourHand}" Rows="2">
                            <Border Width="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.02}"
                                    Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Bounds.Width, Converter={x:Static c:ClockHandLengthConverter.Hour}}"
                                    VerticalAlignment="Bottom"
                                    Background="{TemplateBinding HourHandBrush}"
                                    CornerRadius="9999" />
                            <UniformGrid.RenderTransform>
                                <RotateTransform Angle="{Binding HourAngle, RelativeSource={RelativeSource TemplatedParent}}" />
                            </UniformGrid.RenderTransform>
                        </UniformGrid>
                        <UniformGrid IsVisible="{TemplateBinding ShowMinuteHand}" Rows="2">
                            <Border Width="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.01}"
                                    Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Bounds.Width, Converter={x:Static c:ClockHandLengthConverter.Minute}}"
                                    VerticalAlignment="Bottom"
                                    Background="{TemplateBinding MinuteHandBrush}"
                                    CornerRadius="9999" />
                            <UniformGrid.RenderTransform>
                                <RotateTransform Angle="{Binding MinuteAngle, RelativeSource={RelativeSource TemplatedParent}}" />
                            </UniformGrid.RenderTransform>
                        </UniformGrid>
                        <UniformGrid IsVisible="{TemplateBinding ShowSecondHand}" Rows="2">
                            <Border Width="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.005}"
                                    Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Bounds.Width, Converter={x:Static c:ClockHandLengthConverter.Second}}"
                                    VerticalAlignment="Bottom"
                                    Background="{TemplateBinding SecondHandBrush}"
                                    CornerRadius="9999" />
                            <UniformGrid.RenderTransform>
                                <RotateTransform Angle="{Binding SecondAngle, RelativeSource={RelativeSource TemplatedParent}}" />
                            </UniformGrid.RenderTransform>
                        </UniformGrid>
                        <Ellipse Width="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.08}"
                                 Height="{Binding Bounds.Height, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.08}"
                                 Fill="{TemplateBinding CenterBackground}"
                                 Stroke="{TemplateBinding CenterBorderBrush}"
                                 StrokeThickness="{TemplateBinding CenterBorderThickness}" />
                    </Grid>
                </Grid>
            </ControlTemplate>
        </Setter>

        <Style Selector="^.Inverse">
            <Setter Property="TickBrush" Value="{my:Brush $parent[TemplatedControl].Foreground, Opacity={StaticResource MyNet.Opacity.Secondary}}" />
        </Style>

        <Style Selector="^.Outlined">
            <Setter Property="BorderBrush" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="BorderThickness" Value="3" />
        </Style>

        <Style Selector="^.Solid">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{my:Brush $self.Background, Contrast=True}" />
            <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Container.Background}" />
            <Setter Property="TickBrush" Value="{my:Brush $self.Background, Contrast=True}" />

            <Style Selector="^.Inverse">
                <Setter Property="Background" Value="{my:Brush $self.Foreground}" />
                <Setter Property="HourHandBrush" Value="{my:Brush $self.Background, Contrast=True}" />
                <Setter Property="MinuteHandBrush" Value="{my:Brush $self.Background, Contrast=True}" />
                <Setter Property="SecondHandBrush" Value="{my:Brush $self.Background, Contrast=True}" />
                <Setter Property="CenterBackground" Value="{my:Brush $self.Background, Contrast=True}" />
                <Setter Property="CenterBorderBrush" Value="{my:Brush $self.Background, Contrast=True}" />
            </Style>
        </Style>
    </ControlTheme>
</ResourceDictionary>
