<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="http://mynet.com/avalonia"
                    x:CompileBindings="True">

    <ControlTheme x:Key="{x:Type ColorPicker}" TargetType="ColorPicker">
        <Setter Property="my:ColorPickerAssist.ButtonTheme" Value="{StaticResource {x:Type DropDownButton}}" />
        <Setter Property="my:ColorPickerAssist.ColorViewTheme" Value="{StaticResource {x:Type ColorView}}" />
        <Setter Property="Palette">
            <my:DarkColorPalette />
        </Setter>
        <Setter Property="my:FlyoutAssist.Width" Value="316" />
        <Setter Property="my:FlyoutAssist.Height" Value="360" />
        <Setter Property="ContentTemplate">
            <DataTemplate  DataType="{x:Type Color}">
                <StackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Spacing.Medium}">
                    <Border MinWidth="24"
                            Padding="0"
                            Background="{DynamicResource MyNet.Brush.Transparency.Small}"
                            ClipToBounds="True"
                            Theme="{StaticResource MyNet.Theme.Border.Card}">
                        <Border Background="{Binding Converter={x:Static my:BrushConverter.Default}}" />
                    </Border>
                    <TextBlock Text="{my:Translation}" />
                </StackPanel>
            </DataTemplate>
        </Setter>
        <Setter Property="Content" Value="{Binding $self.Color}" />
        <Setter Property="Template">
            <ControlTemplate TargetType="{x:Type ColorPicker}">
                <DropDownButton HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                Classes="no-disablable"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Theme="{TemplateBinding my:ColorPickerAssist.ButtonTheme}"
                                UseLayoutRounding="False">
                    <DropDownButton.Flyout>
                        <Flyout>
                            <ColorView Width="{TemplateBinding my:FlyoutAssist.Width}"
                                       Height="{TemplateBinding my:FlyoutAssist.Height}"
                                       ColorModel="{TemplateBinding ColorModel}"
                                       ColorSpectrumComponents="{TemplateBinding ColorSpectrumComponents}"
                                       ColorSpectrumShape="{TemplateBinding ColorSpectrumShape}"
                                       HexInputAlphaPosition="{TemplateBinding HexInputAlphaPosition}"
                                       HsvColor="{Binding HsvColor, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                       IsAccentColorsVisible="{TemplateBinding IsAccentColorsVisible}"
                                       IsAlphaEnabled="{TemplateBinding IsAlphaEnabled}"
                                       IsAlphaVisible="{TemplateBinding IsAlphaVisible}"
                                       IsColorComponentsVisible="{TemplateBinding IsColorComponentsVisible}"
                                       IsColorModelVisible="{TemplateBinding IsColorModelVisible}"
                                       IsColorPaletteVisible="{TemplateBinding IsColorPaletteVisible}"
                                       IsColorPreviewVisible="{TemplateBinding IsColorPreviewVisible}"
                                       IsColorSpectrumSliderVisible="{TemplateBinding IsColorSpectrumSliderVisible}"
                                       IsColorSpectrumVisible="{TemplateBinding IsColorSpectrumVisible}"
                                       IsComponentSliderVisible="{TemplateBinding IsComponentSliderVisible}"
                                       IsComponentTextInputVisible="{TemplateBinding IsComponentTextInputVisible}"
                                       IsHexInputVisible="{TemplateBinding IsHexInputVisible}"
                                       MaxHue="{TemplateBinding MaxHue}"
                                       MaxSaturation="{TemplateBinding MaxSaturation}"
                                       MaxValue="{TemplateBinding MaxValue}"
                                       MinHue="{TemplateBinding MinHue}"
                                       MinSaturation="{TemplateBinding MinSaturation}"
                                       MinValue="{TemplateBinding MinValue}"
                                       Palette="{TemplateBinding Palette}"
                                       PaletteColors="{TemplateBinding PaletteColors}"
                                       PaletteColumnCount="{TemplateBinding PaletteColumnCount}"
                                       SelectedIndex="{TemplateBinding SelectedIndex}"
                                       Theme="{TemplateBinding my:ColorPickerAssist.ColorViewTheme}"
                                       Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                        </Flyout>
                    </DropDownButton.Flyout>
                </DropDownButton>
            </ControlTemplate>
        </Setter>

        <Style Selector="^.Light">
            <Setter Property="my:ColorPickerAssist.ColorViewTheme" Value="{StaticResource MyNet.Theme.ColorView.Simple}" />
            <Setter Property="ColorSpectrumComponents" Value="SaturationValue" />
            <Setter Property="IsAccentColorsVisible" Value="False" />
            <Setter Property="ColorModel" Value="Hsva" />
            <Setter Property="IsComponentTextInputVisible" Value="False" />
            <Setter Property="my:FlyoutAssist.Width" Value="260" />
            <Setter Property="my:FlyoutAssist.Height" Value="NaN" />
        </Style>

        <Style Selector="^.HideValue">
            <Setter Property="ContentTemplate">
                <DataTemplate DataType="{x:Type Color}">
                    <Border Padding="0"
                            Background="{DynamicResource MyNet.Brush.Transparency.Small}"
                            ClipToBounds="True"
                            Theme="{StaticResource MyNet.Theme.Border.Card}"
                            ToolTip.Tip="{my:Translation}">
                        <Border Background="{Binding Converter={x:Static my:BrushConverter.Default}}" />
                    </Border>
                </DataTemplate>
            </Setter>
        </Style>
    </ControlTheme>
</ResourceDictionary>
