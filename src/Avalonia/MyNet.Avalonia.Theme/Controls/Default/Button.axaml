<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="http://mynet.com/avalonia"
                    xmlns:sys="clr-namespace:System;assembly=netstandard"
                    x:CompileBindings="True">

    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="{StaticResource MyNet.HorizontalAlignment.Control}" />
        <Setter Property="VerticalAlignment" Value="{StaticResource MyNet.VerticalAlignment.Control}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{StaticResource MyNet.CornerRadius.Control}" />
        <Setter Property="my:ShadowAssist.ShadowDepth" Value="Depth0" />
        <Setter Property="ContentTemplate" Value="{StaticResource MyNet.DataTemplate.Icon}" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Padding" Value="{StaticResource MyNet.Padding.Button.Medium}" />
        <Setter Property="MinHeight" Value="{StaticResource MyNet.Height.Button.Medium}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Button}" />
        <Setter Property="FontWeight" Value="{StaticResource MyNet.Font.Weight.Button}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="True" />

        <Style Selector="^">
            <Setter Property="Background" Value="{DynamicResource MyNet.Brush.Control.Background}" />
            <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />
            <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
            <Setter Property="my:ThemeAssist.HoverBorderBrush" Value="Transparent" />
            <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $parent[TemplatedControl].Foreground}" />
            <Setter Property="my:ThemeAssist.ActiveBackground" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            <Setter Property="my:ThemeAssist.ActiveForeground" Value="{my:Brush $self.(my:ThemeAssist.ActiveBackground), Contrast=True}" />
            <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.Foreground}" />
        </Style>

        <Setter Property="FocusAdorner">
            <FocusAdornerTemplate>
                <Rectangle Classes="Inner" Theme="{StaticResource MyNet.Theme.Rectangle.Focus}" />
            </FocusAdornerTemplate>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate TargetType="Button">
                <Panel Name="PART_RootPanel">

                    <Border Name="PART_MainBorder"
                            my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                    <Border Name="PART_ActiveBorder"
                            Background="{TemplateBinding my:ThemeAssist.ActiveBackground}"
                            BorderBrush="{TemplateBinding my:ThemeAssist.ActiveBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Theme="{StaticResource MyNet.Theme.Border.State}" />

                    <Border Name="PART_HoverBorder"
                            Background="{TemplateBinding my:ThemeAssist.HoverBackground}"
                            BorderBrush="{TemplateBinding my:ThemeAssist.HoverBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Theme="{StaticResource MyNet.Theme.Border.State}" />

                    <Border ClipToBounds="True" CornerRadius="{TemplateBinding CornerRadius}">
                        <my:Ripple Name="PART_Ripple" RippleFill="{TemplateBinding my:ThemeAssist.RippleColor}">
                            <ContentPresenter Name="PART_ContentPresenter"
                                              Padding="{TemplateBinding Padding}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              BackgroundSizing="{TemplateBinding BackgroundSizing}"
                                              BorderThickness="{TemplateBinding BorderThickness}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              CornerRadius="{TemplateBinding CornerRadius}"
                                              Foreground="{TemplateBinding Foreground}"
                                              RecognizesAccessKey="True"
                                              TextElement.FontSize="{TemplateBinding FontSize}"
                                              TextElement.FontWeight="{TemplateBinding FontWeight}"
                                              UseLayoutRounding="False" />
                        </my:Ripple>
                    </Border>
                </Panel>
            </ControlTemplate>
        </Setter>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover">
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.HoverForeground)}" />

            <Style Selector="^.Shadow /template/ Border#PART_MainBorder">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Border#PART_HoverBorder">
                <Setter Property="Opacity" Value="1" />
            </Style>
        </Style>

        <!-- Active (for button with state "selected") -->
        <Style Selector="^:selected, ^.Selected">
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />

            <Style Selector="^.Shadow /template/ Border#PART_MainBorder">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Border#PART_ActiveBorder">
                <Setter Property="Opacity" Value="1" />
            </Style>

        </Style>

        <Style Selector="^.Outlined">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{DynamicResource MyNet.Brush.Control.Border}" />
            <Setter Property="my:ThemeAssist.SecondaryColor" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.(my:ThemeAssist.SecondaryColor)}" />
            <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.(my:ThemeAssist.SecondaryColor), Opacity={StaticResource MyNet.Opacity.Hover}}" />

            <Style Selector="^.Solid">
                <Setter Property="my:ThemeAssist.TertiaryColor" Value="{DynamicResource MyNet.Brush.Control.Border}" />
                <Setter Property="BorderBrush" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            </Style>

            <Style Selector="^.Light">
                <Setter Property="my:ThemeAssist.TertiaryColor" Value="{DynamicResource MyNet.Brush.Control.Border}" />
                <Setter Property="BorderBrush" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            </Style>

            <Style Selector="^.Text">
                <Setter Property="my:ThemeAssist.TertiaryColor" Value="{DynamicResource MyNet.Brush.Control.Border}" />
                <Setter Property="BorderBrush" Value="{Binding $self.(my:ThemeAssist.TertiaryColor)}" />
            </Style>
        </Style>

        <Style Selector="^.Text">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />

            <Style Selector="^.Light">
                <Setter Property="my:ThemeAssist.SecondaryColor" Value="{DynamicResource MyNet.Brush.Application.Foreground}" />
                <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.SecondaryColor)}" />
                <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $self.(my:ThemeAssist.SecondaryColor)}" />
            </Style>
        </Style>

        <Style Selector="^.Solid">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{DynamicResource MyNet.Brush.Control.Background}" />
            <Setter Property="Background" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
            <Setter Property="Foreground" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Contrast=True}" />
            <Setter Property="my:ThemeAssist.HoverForeground" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Contrast=True}" />

            <Style Selector="^:selected, ^.Selected">
                <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.ActiveForeground)}" />
            </Style>
        </Style>

        <Style Selector="^.Light">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{DynamicResource MyNet.Brush.Control.Background}" />
            <Setter Property="Background" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Opacity={StaticResource MyNet.Opacity.Filled}}" />
            <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.(my:ThemeAssist.PrimaryColor), Opacity={StaticResource MyNet.Opacity.Hover}}" />
            <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
        </Style>

        <!-- Sizes -->
        <Style Selector="^.Small">
            <Setter Property="MinHeight" Value="{StaticResource MyNet.Height.Button.Small}" />
            <Setter Property="Padding" Value="{StaticResource MyNet.Padding.Button.Small}" />
        </Style>
        <Style Selector="^.Medium">
            <Setter Property="MinHeight" Value="{StaticResource MyNet.Height.Button.Medium}" />
            <Setter Property="Padding" Value="{StaticResource MyNet.Padding.Button.Medium}" />
        </Style>
        <Style Selector="^.Large">
            <Setter Property="MinHeight" Value="{StaticResource MyNet.Height.Button.Large}" />
            <Setter Property="Padding" Value="{StaticResource MyNet.Padding.Button.Large}" />
        </Style>

        <!-- Specifics -->
        <Style Selector="^.Clipboard">
            <Setter Property="ToolTip.Tip" Value="{my:Resource CopyInClipBoard}" />
            <Setter Property="Command" Value="{x:Static my:ClipboardManager.CopyTextCommand}" />
            <Setter Property="Content">
                <Setter.Value>
                    <Template>
                        <PathIcon Data="{StaticResource MyNet.Geometry.ContentCopy}" />
                    </Template>
                </Setter.Value>
            </Setter>
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.Button.Rounded" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Medium}" />
        <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Medium}" />
        <Setter Property="FocusAdorner">
            <FocusAdornerTemplate>
                <Ellipse Classes="Inner" Theme="{StaticResource MyNet.Theme.Ellipse.Focus}" />
            </FocusAdornerTemplate>
        </Setter>

        <Setter Property="Template">
            <ControlTemplate>
                <Panel Name="PART_RootPanel">

                    <Ellipse Name="PART_MainEllipse"
                             my:ShadowAssist.ShadowDepth="{TemplateBinding my:ShadowAssist.ShadowDepth}"
                             Fill="{TemplateBinding Background}"
                             Stroke="{TemplateBinding BorderBrush}"
                             StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:ThicknessToDoubleConverter.Left}}" />

                    <Ellipse Name="PART_ActiveEllipse"
                             Fill="{TemplateBinding my:ThemeAssist.ActiveBackground}"
                             Stroke="{TemplateBinding my:ThemeAssist.ActiveBorderBrush}"
                             StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:ThicknessToDoubleConverter.Left}}"
                             Theme="{StaticResource MyNet.Theme.Ellipse.State}" />

                    <Ellipse Name="PART_HoverEllipse"
                             Fill="{TemplateBinding my:ThemeAssist.HoverBackground}"
                             Stroke="{TemplateBinding my:ThemeAssist.HoverBorderBrush}"
                             StrokeThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:ThicknessToDoubleConverter.Left}}"
                             Theme="{StaticResource MyNet.Theme.Ellipse.State}" />

                    <Border ClipToBounds="True" CornerRadius="9999">
                        <my:Ripple Name="PART_Ripple" RippleFill="{TemplateBinding my:ThemeAssist.RippleColor}">
                            <ContentPresenter Name="PART_ContentPresenter"
                                              Padding="{TemplateBinding Padding}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              BackgroundSizing="{TemplateBinding BackgroundSizing}"
                                              BorderThickness="{TemplateBinding BorderThickness}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              CornerRadius="{TemplateBinding CornerRadius}"
                                              Foreground="{TemplateBinding Foreground}"
                                              RecognizesAccessKey="True"
                                              TextElement.FontSize="{TemplateBinding FontSize}"
                                              TextElement.FontWeight="{TemplateBinding FontWeight}"
                                              UseLayoutRounding="False" />
                        </my:Ripple>
                    </Border>
                </Panel>
            </ControlTemplate>
        </Setter>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover">

            <Style Selector="^.Shadow /template/ Ellipse#PART_MainEllipse">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Ellipse#PART_HoverEllipse">
                <Setter Property="Opacity" Value="1" />
            </Style>
        </Style>

        <!-- Active -->
        <Style Selector="^:selected">
            <Style Selector="^.Shadow /template/ Ellipse#PART_MainEllipse">
                <Setter Property="my:ShadowAssist.Darken" Value="True" />
            </Style>

            <Style Selector="^ /template/ Ellipse#PART_ActiveEllipse">
                <Setter Property="Opacity" Value="1" />
            </Style>
        </Style>

        <!-- Sizes -->
        <Style Selector="^.Small">
            <Setter Property="Padding" Value="1" />
            <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Small}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Small}" />
        </Style>
        <Style Selector="^.Medium">
            <Setter Property="Padding" Value="1" />
            <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Medium}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Medium}" />
        </Style>
        <Style Selector="^.Large">
            <Setter Property="Padding" Value="1" />
            <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Large}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Large}" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.Button.Icon" TargetType="Button" BasedOn="{StaticResource MyNet.Theme.Button.Rounded}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding $self.(my:ThemeAssist.PrimaryColor)}" />
        <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $self.Foreground}" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.Small}" />
        <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.Small}" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="FocusAdorner">
            <FocusAdornerTemplate>
                <Ellipse Theme="{StaticResource MyNet.Theme.Ellipse.Focus}" />
            </FocusAdornerTemplate>
        </Setter>

        <Style Selector="^">
            <Setter Property="my:ThemeAssist.PrimaryColor" Value="{Binding $parent[TemplatedControl].Foreground}" />
        </Style>

        <Setter Property="Template">
            <ControlTemplate TargetType="Button">
                <Border Name="PART_MainBorder">
                    <my:Ripple Name="PART_Ripple"
                               IsCentered="True"
                               RippleFill="{TemplateBinding my:ThemeAssist.RippleColor}"
                               SizeMultiplier="3">
                        <PathIcon Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}"
                                  Background="{TemplateBinding Background}"
                                  Data="{TemplateBinding Content}"
                                  Foreground="{TemplateBinding Foreground}" />
                    </my:Ripple>
                </Border>
            </ControlTemplate>
        </Setter>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover">
            <Setter Property="Opacity" Value="1" />
        </Style>

        <!-- Size -->
        <Style Selector="^.ExtraSmall">
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.ExtraSmall}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.ExtraSmall}" />
        </Style>
        <Style Selector="^.Small">
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.Small}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.Small}" />
        </Style>
        <Style Selector="^.Medium">
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.Medium}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.Medium}" />
        </Style>
        <Style Selector="^.Large">
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.Large}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.Large}" />
        </Style>
        <Style Selector="^.ExtraLarge">
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Height" Value="{StaticResource MyNet.Size.Icon.ExtraLarge}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Size.Icon.ExtraLarge}" />
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.Button.Embedded.Tool" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding $parent[TemplatedControl].Foreground}" />
        <Setter Property="my:ThemeAssist.HoverBackground" Value="{my:Brush $self.Foreground, Opacity={StaticResource MyNet.Opacity.Hover}}" />
        <Setter Property="my:ThemeAssist.HoverForeground" Value="{Binding $self.Foreground}" />
        <Setter Property="my:ThemeAssist.RippleColor" Value="{Binding $self.Foreground}" />
        <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Tool}" />
        <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Tool}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="ContentTemplate">
            <DataTemplate DataType="{x:Type sys:Object}">
                <PathIcon Width="{StaticResource MyNet.Size.Icon.Tool}"
                          Height="{StaticResource MyNet.Size.Icon.Tool}"
                          Classes="ExtraSmall"
                          Data="{Binding}" />
            </DataTemplate>
        </Setter>

        <!-- Hover -->
        <Style Selector="^:not(:disabled):pointerover">
            <Setter Property="Opacity" Value="1" />
        </Style>

        <!-- Styles -->
        <Style Selector="^.Stretch">
            <Setter Property="CornerRadius" Value="0" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="Padding" Value="{my:Thickness Default, Horizontal}" />
            <Setter Property="Height" Value="NaN" />
            <Setter Property="Width" Value="NaN" />
        </Style>

        <!-- Specifics -->
        <Style Selector="^.Clipboard">
            <Setter Property="Content" Value="{StaticResource MyNet.Geometry.ContentCopy}" />
        </Style>

        <Style Selector="^.Small">
            <Setter Property="Height" Value="{StaticResource MyNet.Height.Button.Tool.Small}" />
            <Setter Property="Width" Value="{StaticResource MyNet.Height.Button.Tool.Small}" />
            <Setter Property="MinHeight" Value="{StaticResource MyNet.Height.Button.Tool.Small}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="ContentTemplate">
                <DataTemplate DataType="{x:Type sys:Object}">
                    <PathIcon Width="{StaticResource MyNet.Size.Icon.Tool.Small}"
                              Height="{StaticResource MyNet.Size.Icon.Tool.Small}"
                              Classes="ExtraSmall"
                              Data="{Binding}" />
                </DataTemplate>
            </Setter>
        </Style>
    </ControlTheme>

    <ControlTheme x:Key="MyNet.Theme.Button.Clean" TargetType="Button">
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Template">
            <ControlTemplate TargetType="Button">
                <ContentPresenter Name="PART_ContentPresenter"
                                  Padding="{TemplateBinding Padding}"
                                  HorizontalContentAlignment="Stretch"
                                  VerticalContentAlignment="Stretch"
                                  Content="{TemplateBinding Content}"
                                  Foreground="{TemplateBinding Foreground}">
                    <ContentPresenter.Background>
                        <SolidColorBrush Opacity="0.002" Color="White" />
                    </ContentPresenter.Background>
                </ContentPresenter>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!-- RepeatButtons -->
    <ControlTheme x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource MyNet.Theme.Button.Icon}" />
</ResourceDictionary>