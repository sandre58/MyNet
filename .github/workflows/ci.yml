name: CI - Build and Test

on:
  push:
    branches: [ "main", "feature/*", "hotfix/*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read       # Required to checkout code
  pages: write         # Required to publish to GitHub Pages
  id-token: write      # Required for OIDC authentication
  checks: write        # Required to publish test results
  pull-requests: write # Required to comment on PRs
  actions: read        # Required to read workflow runs

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:

  # Job 1: Build non-WPF projects on Linux
  build-core-projects:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Restore non-WPF dependencies
        run: |
          # Restore core projects (exclude WPF)
          find src -name "*.csproj" -not -path "*/Wpf/*" | while read project; do
            echo "Restoring: $project"
            dotnet restore "$project"
          done

      - name: Build non-WPF projects
        run: |
          # Build core projects
          find src -name "*.csproj" -not -path "*/Wpf/*" | while read project; do
            echo "Building: $project"
            dotnet build "$project" --configuration Release --no-restore
          done

      - name: Run tests with coverage
        run: |
          # Run tests only on non-WPF test projects
          find tests -name "*.csproj" | while read test_project; do
            echo "Testing: $test_project"
            dotnet test "$test_project" --configuration Release \
              --collect:"XPlat Code Coverage" \
              --results-directory ./coverage \
              --logger "GitHubActions;report-warnings=false" \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=cobertura \
              /p:CoverletOutput=./coverage/
          done

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'coverage/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;MarkdownSummaryGithub'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          files: coverage/**/*.trx
          check_name: 'Test Results'
          comment_mode: changes
          fail_on: 'test failures'

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-linux
          path: coveragereport/

      - name: Upload build artifacts (core)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-core
          path: |
            src/**/bin/Release/**/*.dll
            src/**/bin/Release/**/*.pdb
            src/**/bin/Release/**/*.xml

      - name: Upload auto-generated packages (core)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages-core
          path: |
            packages/*.nupkg

  # Job 2: Build WPF projects on Windows
  build-wpf-projects:
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Restore WPF dependencies
        run: |
          # Restore WPF projects using PowerShell
          Get-ChildItem -Path "src/Wpf" -Filter "*.csproj" -Recurse | ForEach-Object {
            Write-Host "Restoring: $($_.FullName)"
            dotnet restore "$($_.FullName)"
          }

      - name: Build WPF projects
        run: |
          # Build WPF projects using PowerShell
          Get-ChildItem -Path "src/Wpf" -Filter "*.csproj" -Recurse | ForEach-Object {
            Write-Host "Building: $($_.FullName)"
            dotnet build "$($_.FullName)" --configuration Release --no-restore
          }

      - name: Upload build artifacts (WPF)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-wpf
          path: |
            src/Wpf/**/bin/Release/**/*.dll
            src/Wpf/**/bin/Release/**/*.pdb
            src/Wpf/**/bin/Release/**/*.xml

      - name: Upload auto-generated packages (WPF)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: packages-wpf
          path: |
            packages/*.nupkg

  # Job 3: Collect and publish results
  publish-results:
    runs-on: ubuntu-latest
    needs: [build-core-projects, build-wpf-projects]
    if: always()
    
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-linux
          path: coverage-report

      - name: Display package summary
        run: |
          echo "📦 Final packages:"
          ls -la packages/
          echo ""
          echo "📦 Total package count: $(ls packages/*.nupkg 2>/dev/null | wc -l)"

      - name: Upload final packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: packages/*.nupkg

      - name: Display build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Core Projects | ${{ needs.build-core-projects.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WPF Projects | ${{ needs.build-wpf-projects.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package Count:** $(ls final-packages/*.nupkg 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY